{\rtf1\ansi\ansicpg950\cocoartf2865
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red77\green80\blue85;\red246\green247\blue249;\red46\green49\blue51;
\red20\green67\blue174;\red24\green25\blue27;\red162\green0\blue16;\red186\green6\blue115;\red18\green115\blue126;
\red97\green3\blue173;}
{\*\expandedcolortbl;;\cssrgb\c37255\c38824\c40784;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c9412\c35294\c73725;\cssrgb\c12549\c12941\c14118;\cssrgb\c70196\c7843\c7059;\cssrgb\c78824\c15294\c52549;\cssrgb\c3529\c52157\c56863;
\cssrgb\c46275\c15294\c73333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // LineApi.gs\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 exchangeCodeForToken_\cf4 \strokec4 (\cf6 \strokec6 code\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 url\cf4 \strokec4      = \cf7 \strokec7 'https://api.line.me/oauth2/v2.1/token'\cf4 \strokec4 ;\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 payload\cf4 \strokec4  = \{\cb1 \
\cb3     \cf6 \strokec6 grant_type\cf4 \strokec4 : \cf7 \strokec7 'authorization_code'\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 code\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 redirect_uri\cf4 \strokec4 : \cf8 \strokec8 LINE_REDIRECT_URL\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 client_id\cf4 \strokec4 : \cf8 \strokec8 LINE_CHANNEL_ID\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 client_secret\cf4 \strokec4 : \cf8 \strokec8 LINE_CHANNEL_SECRET\cf4 \cb1 \strokec4 \
\cb3   \};\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 resp\cf4 \strokec4  = \cf8 \strokec8 UrlFetchApp\cf4 \strokec4 .\cf6 \strokec6 fetch\cf4 \strokec4 (\cf6 \strokec6 url\cf4 \strokec4 , \{\cb1 \
\cb3     \cf6 \strokec6 method\cf4 \strokec4 : \cf7 \strokec7 'post'\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 payload\cf4 \strokec4 : \cf8 \strokec8 Object\cf4 \strokec4 .\cf6 \strokec6 keys\cf4 \strokec4 (\cf6 \strokec6 payload\cf4 \strokec4 ).\cf6 \strokec6 map\cf4 \strokec4 (\cf6 \strokec6 k\cf4 \strokec4  => \cf7 \strokec7 `\cf4 \strokec4 $\{\cf6 \strokec6 k\cf4 \strokec4 \}\cf7 \strokec7 =\cf4 \strokec4 $\{\cf6 \strokec6 encodeURIComponent\cf4 \strokec4 (\cf6 \strokec6 payload\cf4 \strokec4 [\cf6 \strokec6 k\cf4 \strokec4 ])\}\cf7 \strokec7 `\cf4 \strokec4 ).\cf6 \strokec6 join\cf4 \strokec4 (\cf7 \strokec7 '&'\cf4 \strokec4 ),\cb1 \
\cb3     \cf6 \strokec6 headers\cf4 \strokec4 : \{ \cf7 \strokec7 'Content-Type'\cf4 \strokec4 : \cf7 \strokec7 'application/x-www-form-urlencoded'\cf4 \strokec4  \},\cb1 \
\cb3     \cf6 \strokec6 muteHttpExceptions\cf4 \strokec4 : \cf5 \strokec5 true\cf4 \cb1 \strokec4 \
\cb3   \});\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 json\cf4 \strokec4  = \cf8 \strokec8 JSON\cf4 \strokec4 .\cf6 \strokec6 parse\cf4 \strokec4 (\cf6 \strokec6 resp\cf4 \strokec4 .\cf6 \strokec6 getContentText\cf4 \strokec4 ());\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf6 \strokec6 json\cf4 \strokec4 .\cf6 \strokec6 access_token\cf4 \strokec4 ) \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf8 \strokec8 Error\cf4 \strokec4 (\cf7 \strokec7 '\uc0\u20132 \u25563  access_token \u22833 \u25943 \u65306 '\cf4 \strokec4  + \cf6 \strokec6 resp\cf4 \strokec4 .\cf6 \strokec6 getContentText\cf4 \strokec4 ());\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf6 \strokec6 json\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 getLineProfile_\cf4 \strokec4 (\cf6 \strokec6 accessToken\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 resp\cf4 \strokec4  = \cf8 \strokec8 UrlFetchApp\cf4 \strokec4 .\cf6 \strokec6 fetch\cf4 \strokec4 (\cf7 \strokec7 'https://api.line.me/v2/profile'\cf4 \strokec4 , \{\cb1 \
\cb3     \cf6 \strokec6 headers\cf4 \strokec4 : \{ \cf8 \strokec8 Authorization\cf4 \strokec4 : \cf7 \strokec7 'Bearer '\cf4 \strokec4  + \cf6 \strokec6 accessToken\cf4 \strokec4  \},\cb1 \
\cb3     \cf6 \strokec6 muteHttpExceptions\cf4 \strokec4 : \cf5 \strokec5 true\cf4 \cb1 \strokec4 \
\cb3   \});\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 JSON\cf4 \strokec4 .\cf6 \strokec6 parse\cf4 \strokec4 (\cf6 \strokec6 resp\cf4 \strokec4 .\cf6 \strokec6 getContentText\cf4 \strokec4 ());\cb1 \
\cb3 \}\cb1 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 parseIdToken_\cf4 \strokec4 (\cf6 \strokec6 idToken\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 parts\cf4 \strokec4  = \cf6 \strokec6 idToken\cf4 \strokec4 .\cf6 \strokec6 split\cf4 \strokec4 (\cf7 \strokec7 '.'\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 parts\cf4 \strokec4 .\cf6 \strokec6 length\cf4 \strokec4  !== \cf9 \cb3 \strokec9 3\cf4 \cb3 \strokec4 ) \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf8 \strokec8 Error\cf4 \strokec4 (\cf7 \strokec7 "Invalid id_token format"\cf4 \strokec4 );\cb1 \
\
\cb3   \cf2 \strokec2 // \uc0\u36681 \u25563  base64url \u8594  base64\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 base64\cf4 \strokec4  = \cf6 \strokec6 parts\cf4 \strokec4 [\cf9 \cb3 \strokec9 1\cf4 \cb3 \strokec4 ].\cf6 \strokec6 replace\cf4 \strokec4 (\cf10 \cb3 \strokec10 /-/\cf5 \cb3 \strokec5 g\cf4 \strokec4 , \cf7 \strokec7 '+'\cf4 \strokec4 ).\cf6 \strokec6 replace\cf4 \strokec4 (\cf10 \cb3 \strokec10 /_/\cf5 \cb3 \strokec5 g\cf4 \strokec4 , \cf7 \strokec7 '/'\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 while\cf4 \strokec4  (\cf6 \strokec6 base64\cf4 \strokec4 .\cf6 \strokec6 length\cf4 \strokec4  % \cf9 \cb3 \strokec9 4\cf4 \cb3 \strokec4  !== \cf9 \cb3 \strokec9 0\cf4 \cb3 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 base64\cf4 \strokec4  += \cf7 \strokec7 '='\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 decoded\cf4 \strokec4  = \cf8 \strokec8 Utilities\cf4 \strokec4 .\cf6 \strokec6 base64Decode\cf4 \strokec4 (\cf6 \strokec6 base64\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf8 \strokec8 JSON\cf4 \strokec4 .\cf6 \strokec6 parse\cf4 \strokec4 (\cf8 \strokec8 Utilities\cf4 \strokec4 .\cf6 \strokec6 newBlob\cf4 \strokec4 (\cf6 \strokec6 decoded\cf4 \strokec4 ).\cf6 \strokec6 getDataAsString\cf4 \strokec4 ());\cb1 \
\cb3 \}\cb1 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 getLineUserInfo_\cf4 \strokec4 (\cf6 \strokec6 tokenJson\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 profile\cf4 \strokec4  = \cf6 \strokec6 getLineProfile_\cf4 \strokec4 (\cf6 \strokec6 tokenJson\cf4 \strokec4 .\cf6 \strokec6 access_token\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 payload\cf4 \strokec4  = \cf6 \strokec6 parseIdToken_\cf4 \strokec4 (\cf6 \strokec6 tokenJson\cf4 \strokec4 .\cf6 \strokec6 id_token\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \{\cb1 \
\cb3     \cf6 \strokec6 userId\cf4 \strokec4 : \cf6 \strokec6 profile\cf4 \strokec4 .\cf6 \strokec6 userId\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 displayName\cf4 \strokec4 : \cf6 \strokec6 profile\cf4 \strokec4 .\cf6 \strokec6 displayName\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 pictureUrl\cf4 \strokec4 : \cf6 \strokec6 profile\cf4 \strokec4 .\cf6 \strokec6 pictureUrl\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 email\cf4 \strokec4 : \cf6 \strokec6 payload\cf4 \strokec4 .\cf6 \strokec6 email\cf4 \strokec4  || \cf7 \strokec7 ""\cf4 \cb1 \strokec4 \
\cb3   \};\cb1 \
\cb3 \}\cb1 \
}